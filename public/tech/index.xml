<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Teches on 王楚骁的site</title>
    <link>http://localhost:1313/tech/</link>
    <description>Recent content in Teches on 王楚骁的site</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2025 20:48:12 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>时隔十年，AI时代重新学习线性代数</title>
      <link>http://localhost:1313/tech/linear_algebra/</link>
      <pubDate>Wed, 26 Feb 2025 20:48:12 +0800</pubDate>
      <guid>http://localhost:1313/tech/linear_algebra/</guid>
      <description>&lt;h1 id=&#34;for-why&#34;&gt;for why?&lt;/h1&gt;
&lt;p&gt;以Golang为例子，使用Golang开发移动端应用在处理复杂业务逻辑和多端需求时，展现出了显著的优势。相比于Kotlin、Java、Flutter和JavaScript等其他技术栈，Go语言在生态支持、二进制体积和性能优化方面都表现出色。其轻量级的二进制文件和出色的性能使得在复杂业务逻辑和特定场景下的应用开发中，能够显著节省开发成本。
通过利用Go语言的跨平台编译能力，开发者能够将复杂的核心功能代码一次性编写，然后编译到各个目标平台上。这种统一的底层架构不仅降低了开发难度，还大大减少了问题排查的复杂度。在移动端或者Web前端开发中，开发人员只需通过调用Go编译生成的库文件（如.so或.wasm格式），并通过传入回调函数接受回调来实现UI的更新，从而进一步降低了开发成本和维护成本。
采用Go语言作为移动端复杂业务逻辑的核心开发语言，不仅能够提升开发效率和性能表现，还能在多端需求下实现代码的重用和统一管理，为开发团队带来显著的经济效益和技术优势。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wasm技术-Golang开发跨平台lib</title>
      <link>http://localhost:1313/tech/wasm/</link>
      <pubDate>Fri, 26 Jul 2024 00:59:41 +0800</pubDate>
      <guid>http://localhost:1313/tech/wasm/</guid>
      <description>&lt;h1 id=&#34;for-why&#34;&gt;for why?&lt;/h1&gt;
&lt;p&gt;以Golang为例子，使用Golang开发移动端应用在处理复杂业务逻辑和多端需求时，展现出了显著的优势。相比于Kotlin、Java、Flutter和JavaScript等其他技术栈，Go语言在生态支持、二进制体积和性能优化方面都表现出色。其轻量级的二进制文件和出色的性能使得在复杂业务逻辑和特定场景下的应用开发中，能够显著节省开发成本。
通过利用Go语言的跨平台编译能力，开发者能够将复杂的核心功能代码一次性编写，然后编译到各个目标平台上。这种统一的底层架构不仅降低了开发难度，还大大减少了问题排查的复杂度。在移动端或者Web前端开发中，开发人员只需通过调用Go编译生成的库文件（如.so或.wasm格式），并通过传入回调函数接受回调来实现UI的更新，从而进一步降低了开发成本和维护成本。
采用Go语言作为移动端复杂业务逻辑的核心开发语言，不仅能够提升开发效率和性能表现，还能在多端需求下实现代码的重用和统一管理，为开发团队带来显著的经济效益和技术优势。&lt;/p&gt;
&lt;h1 id=&#34;gopython的移动端开发&#34;&gt;Go/Python的移动端开发&lt;/h1&gt;
&lt;p&gt;以安卓开发举例子：
对于Go的安卓开发而言，gomobile可以直接将已有GO代码编译成安装安装aar文件(.so动态链接库集合)的形式，然后通过Java/Kotlin层代码去调用它，就可以让原本是Go编译的二进制的程序，变成了一个apk形式去运行。对于IOS开发而言，gomobile可以直接将已有GO代码编译成ios需要动态库文件。
对于Python的安卓开发而言，也可以将Python编译成so给Java，Kotlin调用。&lt;/p&gt;
&lt;h1 id=&#34;so和aar包&#34;&gt;so和AAR包&lt;/h1&gt;
&lt;p&gt;什么是so(SHARED OBJECT)？
SO库是一种Linux使用的动态链接库，它允许开发者将代码编译成共享对象文件，并在运行时动态加载和链接。这使得代码更加模块化、可重用，并有助于提高应用程序的性能和可维护性。
静态库是指在我们的应用中，有一些公共代码是需要反复使用的库，静态库于编译的时候链接或者导入。&lt;/p&gt;
&lt;h1 id=&#34;什么是安卓aar包&#34;&gt;什么是安卓AAR包？&lt;/h1&gt;
&lt;p&gt;安卓aar包是Java .class文件，so文件和安卓的布局文件，APP的图片的集合。&lt;/p&gt;
&lt;p&gt;移动端安卓，IOS开发
gomobile是一个可以把Go编译成android和ios平台使用的工具。
go mobile编译安卓aar文件
gomobile bind -target android ./apimobile
gomobile bind -target ios ./apimobile
Go/Python开发web浏览器和嵌入式应用: Wasm
同上，在一些需要web前端有复杂业务逻辑和特殊场景的时候，也可以引入Golang或者其他语言来解决问题，我们可以用把Golang代码编译成.wasm文件的方式实现Go语言在web浏览器和单片机的运行。
什么是wasm&lt;/p&gt;
&lt;p&gt;WebAssembly是基于栈式虚拟机的虚拟二进制指令集（V-ISA）。它被设计为高级编程语言的可移植编译目标。Wasm 的出现更能够让我们直接在 Web平台上，使用那些业界已存在许久的众多优秀的 C/C++ 代码库
Wasm 还能让 Web 应用具有更高的性能，甚至让 Web 应用能够与原生应用展开竞争。它在特殊场景能超越原生应用的性能，大多数情况下和原生不相上下。
wasm是一种编译目标，一种字节码。
Wasm的设计目标是为了能够在JavaScript之外，提供一种高效的实现可能，为构建更高性能的Web应用提供支持。
我们可以简单把他理解为更低级的Java字节码，Python字节码，由wasm虚拟机/运行时来运行。
在 Web 应用程序中，你可以使用 JavaScript 提供的 WebAssembly API 来加载和实例化 WebAssembly 模块。你可以使用 WebAssembly.instantiate() 方法加载模块，并得到一个表示模块实例的对象。你还可以向模块传递导入值，以供模块内部使用。目前在主流浏览器中都已经支持Wasm。JS层就可以对其进行调用。WebAssembly文件中存储着字节码，位于JavaScript引擎中的WebAssembly虚拟机将会执行字节码。&lt;/p&gt;
&lt;p&gt;Wasm的编译
Golang编译到wasm
GOOS=js GOARCH=wasm go build -o main.wasm apiwasm/main.go
Wasm在浏览器运行
主流浏览器JS引擎一般自带了Wasm运行时
Wasm在嵌入式设备，服务器运行&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
